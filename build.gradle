buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: fg_version, changing: true
	}
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def full_mod_version = "${minecraft_version}-${mod_version}"
version = full_mod_version

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
	// Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: mappings_channel, version: minecraft_version
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run')
			
			// debug log spam
			//property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
			
			mods {
				solsweetpotato {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')
			
			// debug log spam
			//property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
			
			mods {
				solsweetpotato {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')
			
			// debug log spam
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			property 'forge.logging.console.level', 'debug'
			
			args '--mod', 'solsweetpotato', '--all', '--output', file('src/generated/resources/')
			
			mods {
				solsweetpotato {
					source sourceSets.main
				}
			}
		}
	}
}

repositories {
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	//forge_version = "${project.forge_minecraft_version}-${project.forge_version}"
	//minecraft "net.minecraftforge:forge:${forge_version}"
	//minecraft "net.minecraftforge:forge:${project.forge_mc_version}-${project.forge_version}"
	minecraft "net.minecraftforge:forge:${project.forge_version}"

	compileOnly fg.deobf("curse.maven:origins-474438:${origins_file}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
			"Specification-Title": "solsweetpotato",
			"Specification-Vendor": "solsweetpotatotarinoita",
			"Specification-Version": "1", // We are version 1 of ourselves
			"Implementation-Title": project.name,
			"Implementation-Version": "${version}",
			"Implementation-Vendor" :"solsweetpotatotarinoita",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
	type 'jar'
	builtBy 'reobfJar'
}
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact reobfArtifact
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}
